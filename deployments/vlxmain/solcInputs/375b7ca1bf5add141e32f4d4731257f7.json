{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/libs/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"../interfaces/IERC20.sol\";\nimport \"./Address.sol\";\nimport \"./SafeMath.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n        );\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\n        );\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance =\n            token.allowance(address(this), spender).sub(\n                value,\n                \"SafeERC20: decreased allowance below zero\"\n            );\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\n        );\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata =\n            address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/libs/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return\n            functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 weiValue,\n        string memory errorMessage\n    ) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/libs/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "contracts/SVLX.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.7.0;\n\nimport \"./libs/Initializable.sol\";\nimport \"./libs/SafeERC20.sol\";\nimport \"./libs/Math.sol\";\nimport \"./libs/ReentrancyGuard.sol\";\nimport \"./libs/EnumerableSet.sol\";\n\nimport \"./interfaces/IStakingAuRa.sol\";\n\ncontract SVLX is Initializable, ReentrancyGuard {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    using Math for uint256;\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n\n    /// @notice VELAS staking contract\n    IStakingAuRa public stakingAuRa;\n\n    /// @notice contract admin address\n    address public admin;\n\n    /// @notice Proposed new admin address\n    address public proposedAdmin;\n\n    /// @dev Staking pool addresses\n    EnumerableSet.AddressSet private stakingPools;\n\n    /// @notice Next pool index\n    uint256 public poolIndex;\n\n    /// @dev SVLX token total supply\n    uint256 private _totalSupply;\n\n    uint256 internal constant WAD = 1e18;\n    uint256 internal constant initialExchangeRateMantissa = WAD;\n\n    event Approval(address indexed src, address indexed guy, uint256 wad);\n    event Transfer(address indexed src, address indexed dst, uint256 wad);\n    event Deposit(address indexed dst, uint256 wad, uint256 old);\n    event Withdrawal(address indexed src, uint256 wad);\n\n    /// @notice Event: claim previously ordered tokens\n    /// @param poolAddress pool address\n    /// @param amount ordered amount\n    event ClaimOrderedWithdraw(address indexed poolAddress, uint256 amount);\n\n    /// @notice Event: withdraw from the pool\n    /// @param poolAddress pool address\n    /// @param amount amount withdrew\n    event PoolWithdraw(address indexed poolAddress, uint256 amount);\n\n    /// @notice Event: withdraw from the ordered tokens\n    /// @param poolAddress pool address\n    /// @param amount amount withdrew\n    event OrderWithdraw(address indexed poolAddress, int256 amount);\n\n    /// @notice Event: Set the staking contract address\n    /// @param oldStakingAuRa old address\n    /// @param newStakingAuRa new address\n    event SetStakingAuRa(address oldStakingAuRa, address newStakingAuRa);\n\n    /// @notice Event: Set proposed admin\n    /// @param proposedAdmin proposed admin address\n    event SetProposedAdmin(address proposedAdmin);\n\n    /// @notice Event: Claim admin\n    /// @param oldAdmin old address\n    /// @param newAdmin new address\n    event ClaimAdmin(address oldAdmin, address newAdmin);\n\n    /// @notice Event: Add a new staking pool\n    /// @param newPool new pool address\n    event AddPool(address newPool);\n\n    /// @notice Event: Remove a existing staking pool\n    /// @param pool pool address\n    event RemovePool(address pool);\n\n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    modifier onlyAdmin {\n        require(msg.sender == admin, \"Admin required\");\n        _;\n    }\n\n    function initialize() public initializer {\n        admin = msg.sender;\n        name = \"Staking Velas\";\n        symbol = \"SVLX\";\n        decimals = 18;\n        poolIndex = 0;\n        stakingAuRa = IStakingAuRa(0x1100000000000000000000000000000000000001);\n    }\n\n    /// @notice Deposit VLX into VELAS pools and mint SVLX tokens\n    function deposit() external payable nonReentrant {\n        require(msg.value > 0, \"Amount cannot be zero\");\n\n        address currentPool = stakingPools.at(poolIndex);\n        require(currentPool != address(0), \"Pool is zero address\");\n\n        // NOTE: Need to mint the SVLX tokens here first to get the correct balance\n        uint256 mintAmount = msg.value.mul(WAD).div(exchangeRate());\n        _mint(msg.sender, mintAmount);\n\n        uint256 redeemable = address(this).balance;\n\n        // Rotating the staking pool for the next action\n        poolIndex = (poolIndex + 1) % stakingPools.length();\n\n        // Stake to the pool when we already staking in the pool (stake amount in the pool is greater than zero),\n        // Or our current balance is more than minStake.\n        if (\n            stakingAuRa.areStakeAndWithdrawAllowed() &&\n            (stakingAuRa.stakeAmount(currentPool, address(this)) > 0 ||\n                redeemable >= stakingAuRa.delegatorMinStake())\n        ) {\n            stakingAuRa.stake{ value: redeemable }(currentPool, redeemable);\n        }\n        // else we just leave the deposited tokens in the contract\n\n        emit Deposit(msg.sender, mintAmount, redeemable);\n    }\n\n    /// @notice Redeem VLX from the stake pools\n    function withdraw(uint256 wad) external nonReentrant returns (uint256) {\n        require(balanceOf[msg.sender] >= wad.mul(WAD).div(exchangeRate()), \"Insufficient balance\");\n        bool hasAction;\n        uint256 redeemable = address(this).balance;\n\n        if (redeemable < wad && stakingAuRa.areStakeAndWithdrawAllowed()) {\n            // Redeemable balance is not enought and the staking service is working\n            IStakingAuRa auRa = stakingAuRa;\n            address currPool;\n            // claim previously ordered VLX from the pool\n            for (uint256 i = 0; i < stakingPools.length(); ++i) {\n                currPool = stakingPools.at(i);\n                uint256 claimAmount = _getClaimableOrderedAmount(currPool);\n                if (claimAmount > 0) {\n                    auRa.claimOrderedWithdraw(currPool);\n                    hasAction = true;\n                    emit ClaimOrderedWithdraw(currPool, claimAmount);\n                }\n            }\n\n            // Get the latest redeemable amount\n            redeemable = address(this).balance;\n            uint256 needToWithdraw = 0;\n            if (redeemable < wad) {\n                uint256 minStake = auRa.delegatorMinStake();\n                uint256 canWithdraw = 0;\n                uint256 maxAllowed = 0;\n                for (uint256 i = 0; i < stakingPools.length(); ++i) {\n                    needToWithdraw = wad > redeemable ? wad.sub(redeemable) : 0;\n                    if (needToWithdraw == 0) {\n                        // Stop the loop if it's enough for user to withdraw\n                        break;\n                    }\n                    currPool = stakingPools.at(i);\n                    maxAllowed = auRa.maxWithdrawAllowed(currPool, address(this));\n                    if (maxAllowed > 0) {\n                        if (\n                            maxAllowed >= needToWithdraw &&\n                            maxAllowed.sub(needToWithdraw) >= minStake\n                        ) {\n                            canWithdraw = needToWithdraw;\n                        } else {\n                            canWithdraw = maxAllowed;\n                        }\n                        auRa.withdraw(currPool, canWithdraw);\n                        hasAction = true;\n                        emit PoolWithdraw(currPool, canWithdraw);\n\n                        // Update the redeemable amount all the time\n                        redeemable = address(this).balance;\n                    }\n                }\n            }\n\n            // Update the redeemable amount all the time\n            redeemable = address(this).balance;\n\n            if (redeemable < wad) {\n                uint256 length = stakingPools.length();\n                uint256 totalOrderedAmount;\n                for (uint256 i = 0; i < length; ++i) {\n                    uint256 claimAmount =\n                        auRa.orderedWithdrawAmount(stakingPools.at(i), address(this));\n                    totalOrderedAmount = totalOrderedAmount.add(claimAmount);\n                }\n                if (totalOrderedAmount < wad) {\n                    uint256 minStake = auRa.delegatorMinStake();\n                    uint256 canOrderWithdraw = 0;\n                    uint256 maxOrderWithdrawal = 0;\n                    for (uint256 i = 0; i < stakingPools.length(); ++i) {\n                        needToWithdraw = wad > redeemable ? wad.sub(redeemable) : 0;\n                        if (needToWithdraw == 0) {\n                            // Stop the loop if it's enough for user to withdraw\n                            break;\n                        }\n                        currPool = stakingPools.at(i);\n                        // uint256 remainingWad = wad.sub(redeemable);\n                        maxOrderWithdrawal = auRa.maxWithdrawOrderAllowed(currPool, address(this));\n                        if (maxOrderWithdrawal > 0) {\n                            if (\n                                maxOrderWithdrawal >= needToWithdraw &&\n                                maxOrderWithdrawal.sub(needToWithdraw) >= minStake\n                            ) {\n                                canOrderWithdraw = needToWithdraw;\n                            } else {\n                                canOrderWithdraw = maxOrderWithdrawal;\n                            }\n\n                            auRa.orderWithdraw(currPool, int256(canOrderWithdraw));\n                            hasAction = true;\n                            emit OrderWithdraw(currPool, int256(canOrderWithdraw));\n\n                            // Update the redeemable amount all the time\n                            redeemable = address(this).balance;\n                        }\n                    }\n                }\n            }\n        }\n\n        // Update the redeemable amount all the time\n        redeemable = address(this).balance;\n\n        uint256 withdrawAmount = wad.min(redeemable);\n        if (withdrawAmount > 0) {\n            uint256 burnAmount = withdrawAmount.mul(WAD).div(exchangeRate());\n            _burn(msg.sender, burnAmount);\n            hasAction = true;\n            _sendWithdrawnStakeAmount(msg.sender, withdrawAmount);\n        }\n\n        require(hasAction, \"no action executed\");\n\n        emit Withdrawal(msg.sender, withdrawAmount);\n\n        return withdrawAmount;\n    }\n\n    /// @notice Get the total amount of VLX in the staking pools,\n    /// including the staked and ordered amount\n    function getPoolTotalBalance() public view returns (uint256 res) {\n        IStakingAuRa auRa = stakingAuRa;\n        for (uint256 i = 0; i < stakingPools.length(); ++i) {\n            //number of order\n            res = res.add(auRa.orderedWithdrawAmount(stakingPools.at(i), address(this)));\n            //The amount of all stakes, including locked and unlocked amounts\n            res = res.add(auRa.stakeAmount(stakingPools.at(i), address(this)));\n        }\n    }\n\n    /// @notice Get the amount of total staked VLX\n    function getTotalStaked() external view returns (uint256 res) {\n        for (uint256 i = 0; i < stakingPools.length(); ++i) {\n            res = res.add(stakingAuRa.stakeAmount(stakingPools.at(i), address(this)));\n        }\n    }\n\n    function exchangeRate() public view returns (uint256) {\n        if (_totalSupply == 0) {\n            return initialExchangeRateMantissa;\n        } else {\n            uint256 currentBalance = getCashPrior();\n            uint256 poolBalance = getPoolTotalBalance();\n            return poolBalance.add(currentBalance).mul(WAD).div(_totalSupply);\n        }\n    }\n\n    function getCashPrior() internal view returns (uint256) {\n        if (address(this).balance > msg.value) {\n            return address(this).balance.sub(msg.value);\n        } else {\n            return 0;\n        }\n    }\n\n    function orderedAmount()\n        external\n        view\n        returns (\n            address[] memory _pools,\n            uint256[] memory _amount,\n            uint256[] memory _claimableBlock\n        )\n    {\n        IStakingAuRa auRa = stakingAuRa;\n        uint256 stakingEpoch = auRa.stakingEpoch();\n\n        uint256 length = stakingPools.length();\n\n        _pools = new address[](length);\n        _amount = new uint256[](length);\n        _claimableBlock = new uint256[](length);\n\n        for (uint256 i = 0; i < length; ++i) {\n            uint256 claimAmount = auRa.orderedWithdrawAmount(stakingPools.at(i), address(this));\n            _pools[i] = stakingPools.at(i);\n            _amount[i] = claimAmount;\n\n            if (\n                stakingEpoch == auRa.orderWithdrawEpoch(stakingPools.at(i), address(this)) &&\n                claimAmount > 0\n            ) {\n                _claimableBlock[i] = auRa.stakingEpochEndBlock() + 1;\n            }\n        }\n    }\n\n    /// @notice Get all the staking pools\n    function getPoolsStaked()\n        external\n        view\n        returns (address[] memory pool, uint256[] memory stake)\n    {\n        IStakingAuRa auRa = stakingAuRa;\n        uint256 length = stakingPools.length();\n        pool = new address[](length);\n        stake = new uint256[](length);\n        for (uint256 i = 0; i < length; ++i) {\n            pool[i] = stakingPools.at(i);\n            stake[i] = auRa.stakeAmount(stakingPools.at(i), address(this));\n        }\n    }\n\n    /// @notice Get the pools where the stake amount is greater than 0\n    function getStakedPools() external view returns (address[] memory pool) {\n        uint256 stakePoolsCount = 0;\n        IStakingAuRa auRa = stakingAuRa;\n        for (uint256 i = 0; i < stakingPools.length(); ++i) {\n            if (auRa.stakeAmount(stakingPools.at(i), address(this)) > 0) {\n                stakePoolsCount++;\n            }\n        }\n\n        pool = new address[](stakePoolsCount);\n        uint256 j = 0;\n        for (uint256 i = 0; i < stakingPools.length(); ++i) {\n            if (auRa.stakeAmount(stakingPools.at(i), address(this)) > 0) {\n                pool[j] = stakingPools.at(i);\n            }\n        }\n    }\n\n    /// @notice Set the staking contract address\n    /// @param _stakingAuRa staking contract address\n    function setStakingAuRa(address _stakingAuRa) external onlyAdmin {\n        address oldStaking = address(stakingAuRa);\n        stakingAuRa = IStakingAuRa(_stakingAuRa);\n\n        emit SetStakingAuRa(oldStaking, _stakingAuRa);\n    }\n\n    function setProposedAdmin(address _proposedAdmin) external onlyAdmin {\n        proposedAdmin = _proposedAdmin;\n\n        emit SetProposedAdmin(proposedAdmin);\n    }\n\n    /// @notice Add a new staking pool\n    /// @param _pool pool address\n    function addPool(address _pool) external onlyAdmin {\n        address newPool = address(0);\n        address[] memory _pools = stakingAuRa.getPools();\n        for (uint256 i = 0; i < _pools.length; ++i) {\n            if (_pools[i] == _pool) {\n                newPool = _pools[i];\n                break;\n            }\n        }\n        require(newPool != address(0), \"Invalid new pool\");\n        stakingPools.add(newPool);\n        emit AddPool(newPool);\n    }\n\n    /// @notice Remove a staking pool\n    /// @param _pool pool address\n    function remove(address _pool) external onlyAdmin {\n        stakingPools.remove(_pool);\n        emit RemovePool(_pool);\n    }\n\n    /// @notice Claim the admin\n    function claimAdmin() external {\n        require(msg.sender == proposedAdmin, \"ProposedAdmin required\");\n        address oldAdmin = admin;\n        admin = proposedAdmin;\n        proposedAdmin = address(0);\n\n        emit ClaimAdmin(oldAdmin, admin);\n    }\n\n    function balanceOfUnderlying(address owner) external view returns (uint256) {\n        return balanceOf[owner].mul(exchangeRate()).div(WAD);\n    }\n\n    function totalSupply() external view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function approve(address guy, uint256 wad) external returns (bool) {\n        allowance[msg.sender][guy] = wad;\n        emit Approval(msg.sender, guy, wad);\n        return true;\n    }\n\n    function transfer(address dst, uint256 wad) external returns (bool) {\n        return transferFrom(msg.sender, dst, wad);\n    }\n\n    function transferFrom(\n        address src,\n        address dst,\n        uint256 wad\n    ) public returns (bool) {\n        require(balanceOf[src] >= wad);\n\n        if (src != msg.sender && allowance[src][msg.sender] != uint256(-1)) {\n            require(allowance[src][msg.sender] >= wad);\n            allowance[src][msg.sender] -= wad;\n        }\n\n        balanceOf[src] -= wad;\n        balanceOf[dst] += wad;\n\n        emit Transfer(src, dst, wad);\n\n        return true;\n    }\n\n    /// @notice Returnt the total amount that can be redeemed by the SVLX holders\n    function getLocalRedeemable() public view returns (uint256) {\n        return getCashPrior();\n    }\n\n    /// @notice Get the total withdrawable amount, including the redeemable balance of the contract,\n    /// and ordered and unlocked amount in the staking pools.\n    function getTotalWithdrawable() external view returns (uint256 res) {\n        res = getLocalRedeemable();\n        uint256 claimableAmount = 0;\n        address currPool;\n        for (uint256 i = 0; i < stakingPools.length(); ++i) {\n            currPool = stakingPools.at(i);\n            res = res.add(stakingAuRa.maxWithdrawAllowed(currPool, address(this)));\n            claimableAmount = _getClaimableOrderedAmount(currPool);\n            if (claimableAmount > 0) res = res.add(claimableAmount);\n        }\n    }\n\n    function _mint(address dst, uint256 amount) internal {\n        // mint the amount\n        _totalSupply = _totalSupply.add(amount);\n        // transfer the amount to the recipient\n        balanceOf[dst] = balanceOf[dst].add(amount);\n        emit Transfer(address(0), dst, amount);\n    }\n\n    function _burn(address dst, uint256 amount) internal {\n        require(balanceOf[dst] >= amount, \"burn amount exceeds balance'\");\n        // mint the amount\n        _totalSupply = _totalSupply.sub(amount);\n        // transfer the amount to the recipient\n        balanceOf[dst] = balanceOf[dst].sub(amount);\n        emit Transfer(dst, address(0), amount);\n    }\n\n    /// @notice Return the current claimable amount from orderedWithdraw in previous epochs\n    function _getClaimableOrderedAmount(address poolAddress) internal view returns (uint256) {\n        IStakingAuRa auRa = stakingAuRa;\n        uint256 currEpoch = auRa.stakingEpoch();\n        if (currEpoch > auRa.orderWithdrawEpoch(poolAddress, address(this)))\n            return auRa.orderedWithdrawAmount(poolAddress, address(this));\n        return 0;\n    }\n\n    /// @dev Sends coins from this contract to the specified address.\n    /// @param _to The target address to send amount to.\n    /// @param _amount The amount to send.\n    function _sendWithdrawnStakeAmount(address payable _to, uint256 _amount) internal {\n        if (!_to.send(_amount)) {\n            // We use the `Sacrifice` trick to be sure the coins can be 100% sent to the receiver.\n            // Otherwise, if the receiver is a contract which has a revert in its fallback function,\n            // the sending will fail.\n            (new Sacrifice){ value: _amount }(_to);\n        }\n    }\n\n    fallback() external payable {}\n\n    receive() external payable {}\n\n    function getStakingPool(uint256 index) external view returns (address) {\n        return stakingPools.at(index);\n    }\n}\n\ncontract Sacrifice {\n    constructor(address payable _recipient) public payable {\n        selfdestruct(_recipient);\n    }\n}\n"
    },
    "contracts/libs/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// solhint-disable-next-line compiler-version\npragma solidity >=0.4.24 <0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(\n            _initializing || _isConstructor() || !_initialized,\n            \"Initializable: contract is already initialized\"\n        );\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /// @dev Returns true if and only if the function is running in the constructor\n    function _isConstructor() private view returns (bool) {\n        // extcodesize checks the size of the code stored in an address, and\n        // address returns the current address. Since the code is still not\n        // deployed when running a constructor, any checks on its code size will\n        // yield zero, making it an effective way to detect if a contract is\n        // under construction or not.\n        address self = address(this);\n        uint256 cs;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            cs := extcodesize(self)\n        }\n        return cs == 0;\n    }\n}\n"
    },
    "contracts/libs/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\n    }\n}\n"
    },
    "contracts/libs/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/libs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n"
    },
    "contracts/interfaces/IStakingAuRa.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\ninterface IStakingAuRa {\n    function stake(address, uint256) external payable;\n\n    function claimOrderedWithdraw(address) external;\n\n    function orderWithdraw(address, int256) external;\n\n    function withdraw(address, uint256) external;\n\n    function validatorSetContract() external view returns (address);\n\n    function stakingEpoch() external view returns (uint256);\n\n    function orderedWithdrawAmount(address, address) external view returns (uint256);\n\n    function orderWithdrawEpoch(address, address) external view returns (uint256);\n\n    function areStakeAndWithdrawAllowed() external view returns (bool);\n\n    function maxWithdrawAllowed(address, address) external view returns (uint256);\n\n    function maxWithdrawOrderAllowed(address, address) external view returns (uint256);\n\n    function stakeAmount(address, address) external view returns (uint256);\n\n    function delegatorMinStake() external view returns (uint256);\n\n    function claimReward(uint256[] calldata _stakingEpochs, address _poolStakingAddress) external;\n\n    function stakingEpochEndBlock() external view returns (uint256);\n\n    function getPools() external view returns (address[] memory);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}